// Global variables
let printifyApiKey = null;
let selectedShopId = '';
let selectedDesignUrl = null;
let selectedDesignOriginalUrl = null;
let selectedDesignId = null;
let currentProduct = null;
let blueprintData = {};
let printAreas = [];
let currentDesignPrompt = '';
let currentPlaceholders = [];
let selectedPrintAreaWidth = 1000;
let selectedPrintAreaHeight = 1000;
let selectedPrintAreaPosition = 'front';
let generatedDesigns = [];
let selectedPrintAreaId = null;
let printifyImageWidth = 1000;
let printifyImageHeight = 1000;
let printifyImageSrc = '';
let selectedBlueprintId = null;

// Initialize global design assignments map
window.selectedDesigns = JSON.parse(sessionStorage.getItem('selectedDesigns')) || {};
let selectedPrintProviderId = null;
let selectedBlueprintImageUrl = null;
let assignedDesigns = {};
let selectedVariants = [];
let productVariants = [];

// API base URL for Netlify functions
const API_BASE = '/.netlify/functions';

// Show print areas directly on the page without using a modal
function showDirectPrintAreaSelection(designId) {
  console.log(`showDirectPrintAreaSelection called for design ID: ${designId}`);
  
  // Create a container for direct print area selection if it doesn't exist
  let directSelectionContainer = document.getElementById('directPrintAreaSelection');
  if (!directSelectionContainer) {
    directSelectionContainer = document.createElement('div');
    directSelectionContainer.id = 'directPrintAreaSelection';
    directSelectionContainer.className = 'mt-4 p-3 border rounded bg-light';
    
    const container = document.getElementById('generatedDesignsContainer');
    if (container) {
      container.appendChild(directSelectionContainer);
    } else {
      document.body.appendChild(directSelectionContainer);
    }
  }
  
  // Clear and show the container
  directSelectionContainer.style.display = 'block';
  directSelectionContainer.innerHTML = `
    <h4 class="text-center mb-3">Select a print area for design #${designId}</h4>
    <div id="directPrintAreasList" class="list-group mt-3"></div>
  `;
  
  const printAreasList = document.getElementById('directPrintAreasList');
  
  // Get the print areas from the blueprint data
  const printAreas = window.currentBlueprintData?.print_areas || [];
  console.log('Print areas available:', printAreas);
  
  if (printAreas.length === 0) {
    printAreasList.innerHTML = '<div class="alert alert-warning">No print areas available for this product.</div>';
  } else {
    // Create a button for each print area
    printAreas.forEach(area => {
      const areaBtn = document.createElement('button');
      areaBtn.type = 'button';
      areaBtn.className = 'list-group-item list-group-item-action d-flex justify-content-between align-items-center';
      areaBtn.innerHTML = `
        <div>
          <h6>${area.title || 'Print Area'}</h6>
          <small class="text-muted">${area.id}</small>
        </div>
        <span class="badge bg-primary rounded-pill">${area.height}×${area.width}</span>
      `;
      
      areaBtn.addEventListener('click', function() {
        console.log(`Print area selected: ${area.id} for design: ${designId}`);
        window.assignDesignToPrintArea(designId, area.id);
        directSelectionContainer.style.display = 'none'; // Hide after selection
      });
      
      printAreasList.appendChild(areaBtn);
    });
    
    // Add a cancel button
    const cancelBtn = document.createElement('button');
    cancelBtn.type = 'button';
    cancelBtn.className = 'btn btn-secondary mt-3';
    cancelBtn.textContent = 'Cancel';
    cancelBtn.addEventListener('click', function() {
      directSelectionContainer.style.display = 'none';
    });
    
    directSelectionContainer.appendChild(cancelBtn);
  }
  
  // Scroll to the selection container
  directSelectionContainer.scrollIntoView({ behavior: 'smooth' });
}

// This function is no longer needed with the drag-and-drop approach
// Keeping it as a stub for backward compatibility
function openPrintAreaSelectionModal(designId) {
  console.log('Using direct print area selection instead of modal');
  showDirectPrintAreaSelection(designId);
}

// Handle print area selection from the modal
function handleModalPrintAreaSelection(designId, printAreaId) {
  assignDesignToPrintArea(designId, printAreaId);
}

// Global function to assign a design to a print area
// This function is exposed globally so it can be called from event handlers
function assignDesignToPrintArea(designId, printAreaId) {
  console.log(`Assigning design ${designId} to print area ${printAreaId}`);
  
  // Store the assignment in the global map
  window.selectedDesigns[printAreaId] = designId;
  
  // Save the state to session storage
  sessionStorage.setItem('selectedDesigns', JSON.stringify(window.selectedDesigns));
  
  // Update the UI to reflect the assignment
  const designCard = document.querySelector(`.design-card[data-design-id="${designId}"]`);
  if (designCard) {
    const assignedBadge = designCard.querySelector('.assigned-badge');
    if (assignedBadge) {
      assignedBadge.classList.remove('d-none');
      assignedBadge.textContent = 'Assigned';
    }
  }
  
  // Update the print area card to show it has a design assigned
  const printAreaCard = document.querySelector(`.print-area-card[data-print-area-id="${printAreaId}"]`);
  if (printAreaCard) {
    const designBadge = printAreaCard.querySelector('.design-badge');
    if (designBadge) {
      designBadge.classList.remove('d-none');
      designBadge.classList.remove('bg-secondary');
      designBadge.classList.add('bg-success');
      designBadge.innerHTML = '<i class="bi bi-check-circle me-1"></i>Design Assigned';
    }
    
    // Add a visual indicator of the assigned design
    let designPreview = printAreaCard.querySelector('.assigned-design-preview');
    if (!designPreview) {
      designPreview = document.createElement('div');
      designPreview.className = 'assigned-design-preview position-absolute w-100 h-100 top-0 start-0';
      printAreaCard.appendChild(designPreview);
    }
    
    // Find the design in the gallery
    const design = window.designGallery?.find(d => d.id === designId);
    if (design) {
      designPreview.style.backgroundImage = `url(${design.url})`;
      designPreview.style.backgroundSize = 'contain';
      designPreview.style.backgroundPosition = 'center';
      designPreview.style.backgroundRepeat = 'no-repeat';
      designPreview.style.opacity = '0.8';
      designPreview.style.zIndex = '1';
    }
  }
  
  // Update the create product button state
  updateCreateProductButton();
}

// State persistence helper functions
function saveStateToStorage() {
  // Save the current state to session storage
  const state = {
    selectedShopId,
    selectedBlueprintId,
    selectedPrintProviderId,
    selectedVariants,
    assignedDesigns: window.selectedDesigns || {},
    currentProduct
  };
  
  try {
    sessionStorage.setItem('printifyAppState', JSON.stringify(state));
    console.log('State saved to session storage');
  } catch (error) {
    console.error('Failed to save state to session storage:', error);
  }
}

function loadStateFromStorage() {
  try {
    const savedState = sessionStorage.getItem('printifyAppState');
    if (savedState) {
      const state = JSON.parse(savedState);
      selectedShopId = state.selectedShopId || '';
      selectedBlueprintId = state.selectedBlueprintId || null;
      selectedPrintProviderId = state.selectedPrintProviderId || null;
      selectedVariants = state.selectedVariants || [];
      window.selectedDesigns = state.assignedDesigns || {};
      currentProduct = state.currentProduct || null;
      
      console.log('State loaded from session storage');
    }
  } catch (error) {
    console.error('Failed to load state from session storage:', error);
  }
}

// Function to display print areas in the UI
function displayPrintAreasInUI(areas) {
  const printAreasList = document.getElementById('printAreasList');
  if (!printAreasList) return;
  
  printAreasList.innerHTML = '';
  
  if (!areas || areas.length === 0) {
    printAreasList.innerHTML = '<div class="alert alert-warning">No print areas available for this product.</div>';
    return;
  }
  
  // Store the print areas globally
  printAreas = areas;
  
  // Create a card for each print area
  const row = document.createElement('div');
  row.className = 'row g-3';
  
  areas.forEach(area => {
    const col = document.createElement('div');
    col.className = 'col-md-4 mb-3';
    
    const card = document.createElement('div');
    card.className = 'card h-100 print-area-card';
    card.dataset.printAreaId = area.id;
    card.dataset.printAreaWidth = area.width || 1000;
    card.dataset.printAreaHeight = area.height || 1000;
    card.dataset.printAreaPosition = area.position || 'front';
    
    card.innerHTML = `
      <div class="card-body position-relative">
        <h5 class="card-title">${area.title || 'Print Area'}</h5>
        <p class="card-text">
          <small class="text-muted">ID: ${area.id}</small><br>
          <small class="text-muted">Size: ${area.width || '?'}×${area.height || '?'} px</small><br>
          <small class="text-muted">Position: ${area.position || 'Not specified'}</small>
        </p>
        <span class="design-badge badge d-none position-absolute top-0 end-0 m-2">
          <i class="bi bi-exclamation-circle me-1"></i>No Design
        </span>
      </div>
    `;
    
    // Add click handler to select this print area
    card.addEventListener('click', function() {
      handlePrintAreaSelection(
        area.id,
        area.position || 'front',
        area.width || 1000,
        area.height || 1000
      );
    });
    
    col.appendChild(card);
    row.appendChild(col);
  });
  
  printAreasList.appendChild(row);
  
  // Update the print area visuals to show which ones have designs assigned
  updatePrintAreaVisuals();
}

// Update print area cards to show assigned designs
function updatePrintAreaVisuals() {
  const printAreaCards = document.querySelectorAll('.print-area-card');
  
  printAreaCards.forEach(card => {
    const areaId = card.dataset.printAreaId;
    
    // Check if this is the selected print area
    if (areaId === selectedPrintAreaId) {
      card.classList.add('selected-print-area');
    } else {
      card.classList.remove('selected-print-area');
    }
    
    // Check if this print area has a design assigned
    const designBadge = card.querySelector('.design-badge');
    if (designBadge) {
      if (selectedDesigns[areaId]) {
        designBadge.classList.remove('d-none');
        designBadge.classList.add('badge', 'bg-success', 'position-absolute', 'top-0', 'end-0', 'm-2');
        designBadge.innerHTML = '<i class="bi bi-check-circle me-1"></i>Design Assigned';
      } else {
        designBadge.classList.remove('bg-success');
        designBadge.classList.add('bg-secondary');
        designBadge.classList.remove('d-none');
        designBadge.innerHTML = '<i class="bi bi-exclamation-circle me-1"></i>No Design';
      }
    }
  });
  
  // Update assigned design previews
  updateAssignedDesignPreviews();
}

// Handle print area selection
function handlePrintAreaSelection(areaId, position, width, height) {
  console.log(`Print area selected: ${areaId}, position: ${position}, size: ${width}x${height}`);
  
  // Store the selected print area info globally
  selectedPrintAreaId = areaId;
  selectedPrintAreaPosition = position;
  selectedPrintAreaWidth = width;
  selectedPrintAreaHeight = height;
  
  // Show the design generation section for this print area
  const printAreaCard = document.querySelector(`.print-area-card[data-print-area-id="${areaId}"]`);
  const title = printAreaCard ? printAreaCard.querySelector('.card-title').textContent : 'Print Area';
  
  showDesignGenerationSection(areaId, title);
  
  // Remove selection styling from all print area cards
  document.querySelectorAll('.print-area-card').forEach(card => {
    card.classList.remove('border-primary');
    card.classList.remove('selected-print-area');
  });
  
  // Add selection styling to the selected print area card
  const selectedCard = document.querySelector(`.print-area-card[data-print-area-id="${areaId}"]`);
  if (selectedCard) {
    selectedCard.classList.add('border-primary');
    selectedCard.classList.add('selected-print-area');
  }
  
  // Update the design gallery buttons to reflect the current print area selection
  if (typeof updateAssignToCurrentAreaButtons === 'function') {
    updateAssignToCurrentAreaButtons();
  }
  
  // Scroll to the design generation section
  const designGenSection = document.getElementById('designGenSection');
  if (designGenSection) {
    designGenSection.scrollIntoView({ behavior: 'smooth' });
  }
}

// Show design generation section for all print areas
function showDesignGenerationSection() {
  const existingDesignGenSection = document.getElementById('designGenSection');
  if (existingDesignGenSection) {
    existingDesignGenSection.remove();
  }
  
  const designGenContainer = document.createElement('div');
  designGenContainer.id = 'designGenSection';
  designGenContainer.className = 'mt-3 p-3 border rounded bg-light';
  
  designGenContainer.innerHTML = `
    <h5>Generate Designs</h5>
    <div class="mb-3">
      <label for="designPrompt" class="form-label">Design Description</label>
      <textarea id="designPrompt" class="form-control" rows="4" placeholder="Describe the design you want to generate...">${currentDesignPrompt}</textarea>
    </div>
    <button id="generateDesignsBtn" type="button" class="btn btn-primary btn-lg w-100">
      <i class="bi bi-magic"></i> Generate Designs
    </button>
    <div id="generationStatus" class="mt-3"></div>
    <div id="generatedDesigns" class="row mt-3"></div>
  `;
  
  const printAreasList = document.getElementById('printAreasList');
  if (printAreasList) {
    printAreasList.after(designGenContainer);
  }
  
  const promptTextarea = document.getElementById('designPrompt');
  if (promptTextarea) {
    promptTextarea.addEventListener('input', function(e) {
      currentDesignPrompt = e.target.value;
    });
  }
  
  const generateBtn = document.getElementById('generateDesignsBtn');
  if (generateBtn) {
    generateBtn.addEventListener('click', function() {
      if (!currentDesignPrompt || !currentDesignPrompt.trim()) {
        alert('Please enter a design prompt.');
        return;
      }
      
      generateBtn.disabled = true;
      generateBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Generating...';
      
      generateDesigns(currentDesignPrompt.trim()).finally(() => {
        generateBtn.disabled = false;
        generateBtn.innerHTML = '<i class="bi bi-magic"></i> Generate Designs';
      });
    });
  }
}

// Generate designs using the provided prompt and print area information
async function generateDesigns(prompt, printAreaId, width, height, position) {
  console.log(`Generating designs with prompt: ${prompt} for print area ${printAreaId} (${width}x${height})`);
  const generationStatus = document.getElementById('generationStatus');
  
  if (!generationStatus) {
    console.error('Generation status element not found');
    return;
  }
  
  // Log the print area information
  console.log('Print area information:', { printAreaId, width, height, position });
  
  try {
    generationStatus.innerHTML = '<div class="alert alert-info">Generating designs, please wait...</div>';
    
    // Create an array of print area contexts with accurate dimensions
    const printAreaContexts = [];
    
    // If we have specific print area information passed in, use that
    if (printAreaId && width && height) {
      printAreaContexts.push({
        printAreaId: printAreaId,
        position: position || 'front',
        width: parseInt(width),
        height: parseInt(height)
      });
      console.log('Using specific print area dimensions:', { printAreaId, width, height, position });
    }
    // Otherwise, check if we have print areas available
    else if (printAreas && printAreas.length > 0) {
      // Use all available print areas with their actual dimensions
      printAreas.forEach(area => {
        if (area && area.id) {
          printAreaContexts.push({
            printAreaId: area.id,
            position: area.position || 'front',
            width: area.width,
            height: area.height
          });
        }
      });
    }
    
    console.log('Using print area contexts:', printAreaContexts);
    
    // Make API call to generate designs
    const response = await fetch('/.netlify/functions/generate-image', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        prompt, 
        numImages: 4,
        printAreaContexts: printAreaContexts.length > 0 ? printAreaContexts : undefined
      })
    });
    
    const data = await response.json();
    console.log('Design generation response:', data);
    
    if (data.success && data.images && data.images.length > 0) {
      // Store the generated designs with their correct dimensions from the response
      generatedDesigns = data.images.map((img, index) => {
        // Use the print area context from the response if available
        const printAreaContext = img.printAreaContext || {
          // If no context in response, use the context from our request based on index
          ...(printAreaContexts[index % printAreaContexts.length] || {}),
          position: 'any' // Fallback position
        };
        
        return {
          id: img.name || `design-${Date.now()}-${index}`,
          url: img.url,
          originalUrl: img.url,
          width: img.width || printAreaContext.width,
          height: img.height || printAreaContext.height,
          printAreaContext: printAreaContext
        };
      });
      
      // Expose designs globally for the design gallery
      window.designGallery = generatedDesigns;
      
      // Display the designs in the gallery using our drag-and-drop implementation
      if (typeof window.dragDropDisplayGeneratedDesigns === 'function') {
        console.log('Using drag-drop implementation for generated designs');
        window.dragDropDisplayGeneratedDesigns(generatedDesigns);
      } else if (typeof window.displayGeneratedDesigns === 'function') {
        console.log('Falling back to original displayGeneratedDesigns');
        window.displayGeneratedDesigns(generatedDesigns);
      }
      
      generationStatus.innerHTML = '<div class="alert alert-success">Designs generated successfully! Select a design to assign it to a print area.</div>';
      return generatedDesigns;
    } else {
      console.error('Failed to generate designs:', data.message || 'Unknown error');
      generationStatus.innerHTML = '<div class="alert alert-danger">Failed to generate designs. Please try again.</div>';
      return [];
    }
  } catch (error) {
    console.error('Error generating designs:', error);
    generationStatus.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
    return [];
  }
}

// Show design generation section for selected print area
function showDesignGenerationSection(areaId, title) {
  const existingDesignGenSection = document.getElementById('designGenSection');
  if (existingDesignGenSection) {
    existingDesignGenSection.remove();
  }
  
  const designGenContainer = document.createElement('div');
  designGenContainer.id = 'designGenSection';
  designGenContainer.className = 'mt-3 p-3 border rounded bg-light';
  
  designGenContainer.innerHTML = `
    <h5>Generate Design for ${title}</h5>
    <p class="text-muted small">Target size: ${selectedPrintAreaWidth}x${selectedPrintAreaHeight} px</p>
    <div class="mb-3">
      <label for="designPromptForArea" class="form-label">Design Description</label>
      <textarea id="designPromptForArea" class="form-control" rows="4" placeholder="Describe the design you want to generate...">${currentDesignPrompt}</textarea>
    </div>
    <button id="printAreaDesignBtn" type="button" class="btn btn-primary btn-lg w-100">
      <i class="bi bi-magic"></i> Generate Design for this Print Area
    </button>
    <div id="generationStatus" class="mt-3"></div>
    <div id="generatedDesigns" class="row mt-3"></div>
  `;
  
  const printAreasList = document.getElementById('printAreasList');
  if (printAreasList) {
    printAreasList.after(designGenContainer);
  }
  
  const promptTextarea = document.getElementById('designPromptForArea');
  if (promptTextarea) {
    promptTextarea.addEventListener('input', function(e) {
      currentDesignPrompt = e.target.value;
    });
  }
  
  const generateBtn = document.getElementById('printAreaDesignBtn');
  if (generateBtn) {
    generateBtn.addEventListener('click', function(event) {
      event.preventDefault();
      event.stopPropagation();
      
      if (!currentDesignPrompt || !currentDesignPrompt.trim()) {
        alert('Please enter a design prompt.');
        return;
      }
      
      generateBtn.disabled = true;
      generateBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Generating...';
      
      // Pass the selected print area information to the generateDesigns function
      generateDesigns(
        currentDesignPrompt.trim(),
        areaId, // Pass the area ID from the function parameter
        selectedPrintAreaWidth,
        selectedPrintAreaHeight,
        selectedPrintAreaPosition
      ).finally(() => {
        generateBtn.disabled = false;
        generateBtn.innerHTML = '<i class="bi bi-magic"></i> Generate Design for this Print Area';
      });
    });
  }
}
